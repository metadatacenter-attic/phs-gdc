# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = TRUE)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
# Sort by id
#merged_df <- merged_df[order(merged_df$patient_id),]
write.csv(merged_df, "merged_data.csv", row.names = FALSE)
#dc_df <- read.csv("dcw_data.csv", header=T)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
# Left join
#output <- merge(x=user_df, y=dc_df, by.x=user_index_column, by.y=dc_index_column, all.x=T, all.y=F)
# Preserve column order
#output <- merged_df[, union(names(df), names(dc_df[-c(grep(dc_index_column, colnames(dc_df)))]))]
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = TRUE)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
# Sort by id
#merged_df <- merged_df[order(merged_df$patient_id),]
write.csv(merged_df, "merged_data.csv", row.names = FALSE)
#dc_df <- read.csv("dcw_data.csv", header=T)
install.packages('dplyr')
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
install.packages('dplyr')
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
# Left join
#output <- merge(x=user_df, y=dc_df, by.x=user_index_column, by.y=dc_index_column, all.x=T, all.y=F)
# Preserve column order
#output <- merged_df[, union(names(df), names(dc_df[-c(grep(dc_index_column, colnames(dc_df)))]))]
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = TRUE)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
# Sort by id
#merged_df <- merged_df[order(merged_df$patient_id),]
write.csv(merged_df, "merged_data.csv", row.names = FALSE)
#dc_df <- read.csv("dcw_data.csv", header=T)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
user_index_column
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
# Left join
#output <- merge(x=user_df, y=dc_df, by.x=user_index_column, by.y=dc_index_column, all.x=T, all.y=F)
# Preserve column order
#output <- merged_df[, union(names(df), names(dc_df[-c(grep(dc_index_column, colnames(dc_df)))]))]
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = TRUE)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
# Sort by id
#merged_df <- merged_df[order(merged_df$patient_id),]
write.csv(merged_df, "merged_data.csv", row.names = FALSE)
#dc_df <- read.csv("dcw_data.csv", header=T)
rlang::last_error()
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column <- "zip"
dc_index_column <- "zipCode"
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
View(user_df)
user_index_column <- "state"
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column <- "state"
dc_index_column <- "zipCode"
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
output
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column <- "zipCode"
dc_index_column <- "zipCode"
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
output
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column <- "zipCode"
dc_index_column <- "zipCode"
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
output
c(user_index_column=dc_index_column)
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column <- "zip"
dc_index_column <- "zipCode"
output <- left_join(user_df, dc_df, by = c(user_index_column=dc_index_column))
output
c(user_index_column=dc_index_column)
c(user_index_column=dc_index_column)
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column <- "zip"
dc_index_column <- "zipCode"
output <- left_join(user_df, dc_df, by = c("zip"="zipCode"))
output
user_df <- read.csv("example1.csv", header = T)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column <- "zip"
dc_index_column <- "zipCode"
output <- left_join(user_df, dc_df, by = c(toString(user_index_column)=toString(dc_index_column)))
output
user_index_column <- "zip"
names(user_index_column)
eval(user_index_column)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by = c(eval(user_index_column)=eval(dc_index_column)))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by = c(toString(user_index_column)=toString(dc_index_column)))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by = c(toString(user_index_column)=toString(dc_index_column)))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=c(toString(user_index_column)=toString(dc_index_column)))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=c(zip=zipCode))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=c(zip=zipCode))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=c(zip=zipCode))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
####
dc_df <- read.csv(dc_file, header=T)
output <- left_join(df, dc_df, by=c(zip=zipCode))
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=c(zip=zipCode))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
####
dc_df <- read.csv(dc_file, header=T)
####
dc_df <- read.csv("dcw_data.csv", header=T)
output <- left_join(df, dc_df, by=c(zip=zipCode))
output <- left_join(df, dc_df, by=c("zip"="zipCode"))
View(output)
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column = "zip"
output <- left_join(df, dc_df, by=c(user_index_column="zipCode"))
output <- left_join(df, dc_df, by=c(eval(user_index_column)="zipCode"))
output <- left_join(df, dc_df, by=c(toString(user_index_column)="zipCode"))
user_index_column = "zip"
output <- left_join(df, dc_df, by=c(toString(user_index_column)="zipCode"))
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
output <- left_join(df, dc_df, by=c("zip"="zipCode"))
output <- left_join(df, dc_df, by=c([user_index_column]="zipCode"))
output <- left_join(df, dc_df, by=c(user_index_column="zipCode"))
c("zip"="zipCode")
a <- c("zip"="zipCode")
a <- c("zip"="zipCode")
a
output <- left_join(df, dc_df, by=c(user_index_column="zipCode"))
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column = "zip"
a <- c("zip"="zipCode")
output <- left_join(df, dc_df, by=c(user_index_column="zipCode"))
output <- left_join(df, dc_df, by=c("zip"="zipCode"))
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=c(zip=zipCode))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
####
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column = "zip"
a <- c("zip"="zipCode")
output <- left_join(df, dc_df, by=c("zip"="zipCode"))
output <- left_join(df, dc_df, by=c(user_index_column="zipCode"))
get(user_index_column)
user_index_column
get("user_index_column")
output <- left_join(df, dc_df, by=c(get("user_index_column")="zipCode"))
output <- left_join(df, dc_df, by=c((get("user_index_column"))="zipCode"))
user_index_column = 'zip'
output <- left_join(df, dc_df, by=c(user_index_column="zipCode"))
output <- left_join(df, dc_df, by=c('user_index_column'="zipCode"))
output <- left_join(df, dc_df, by=c( eval(user_index_column) = "zipCode"))
eval(user_index_column)
eval(user_index_column)[0]
eval(user_index_column)[1]
dc_df <- read.csv("dcw_data.csv", header=T)
user_index_column = 'zip'
a <- c("zip"="zipCode")
output <- left_join(df, dc_df, by=c("zip"="zipCode"))
output <- left_join(df, dc_df, by=setNames(user_index_column, dc_index_column))
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=setNames(user_index_column, dc_index_column))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=setNames(nm=user_index_column, dc_index_column))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column.
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=setNames(nm=user_index_column, dc_index_column))
return (output)
}
# 1. Read example into a data frame
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
df <- read.csv("example1.csv", header = T)
# 2. Merge DC data into the original data frame
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
# 3. Export merged data to csv
write.csv(merged_df, "merged_data.csv", row.names = F)
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
#'
#' @export
#' @examples
#' # Simple merging operation
#' merged_df <- merge_data(your_data_frame, "/tmp/dcw_data.csv", "zip", "zipCode")
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=setNames(nm=user_index_column, dc_index_column))
return (output)
}
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
library(dplyr)
###
#' Merge user data frame with the DataCommons CSV file by the index column
#'
#' @param user_df required, data frame pointing to the user table
#' @param dc_file required, file path pointing to the DataCommons CSV file
#' @param user_index_column required, index column for merging from the user table
#' @param dc_index_column required, index column for merging from the DataCommons table
#' @return A merged data frame
#'
#' @export
#' @examples
#' # Simple merging operation
#' merged_df <- merge_data(your_data_frame, "/tmp/dcw_data.csv", "zip", "zipCode")
merge_data <- function(user_df, dc_file, user_index_column, dc_index_column) {
dc_df <- read.csv(dc_file, header=T)
output <- left_join(user_df, dc_df, by=setNames(nm=user_index_column, dc_index_column))
return (output)
}
# Set workspace
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
# Read sample data into a data frame
df <- read.csv("example1.csv", header = T)
merged_df <- merge_data(df, "dcw_data.csv", "zip", "zipCode")
View(merged_df)
library(dplyr)
# Set the workspace
setwd("/Users/marcosmr/Development/CEDAR/phs-gdc/phs-gdc-dashboard/src/resources/r/example1")
# Read the user's data into a data frame
df1 <- read.csv("user_data.csv", header = T)
# Read the downloaded Data Commons CSV file into a new data frame
df2 <- read.csv("dcw_data.csv", header=T)
# Merge the two data frames using the appropriate column names
col1 = "zip"
col2 = "zipCode"
merged_df <- left_join(df1, df2, by=setNames(nm=col1, col2))
# (Optional) Export merged data to CSV
write.csv(merged_df, "merged_data.csv", row.names = F)
View(merged_df)
install.packages("dplyr")
